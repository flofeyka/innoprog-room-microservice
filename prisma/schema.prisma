// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

enum Language {
  js
  py
  cpp
}

model Log {
  id        String   @id @default(uuid())
  code      String
  createdAt DateTime @default(now())
  roomId    String
  room      Room     @relation(references: [id], fields: [roomId])

  @@map("logs")
}

model Room {
  id                      String       @id @default(uuid())
  students                String[]
  teacher                 String
  taskId                  String?
  language                Language     @default(py)
  studentCursorEnabled    Boolean      @default(false)
  studentSelectionEnabled Boolean      @default(false)
  studentEditCodeEnabled  Boolean      @default(false)
  completed               Boolean      @default(false)
  logs                    Log[]
  roomMembers             RoomMember[]
  roomState               RoomState?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @default(now()) @updatedAt

  @@map("rooms")
}

model RoomMember {
  id         String   @id @default(uuid())
  telegramId String
  username   String?
  roomId     String
  room       Room     @relation(references: [id], fields: [roomId], onDelete: Cascade)
  joinedAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([telegramId, roomId])
  @@map("room_members")
}

model RoomState {
  id               String   @id @default(uuid())
  roomId           String   @unique
  room             Room     @relation(references: [id], fields: [roomId], onDelete: Cascade)
  lastCode         String?  @db.Text
  participantCount Int      @default(0)
  lastActivity     DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("room_states")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
